#!/usr/bin/env ruby

# Authod: Cliff Cyphers
# Published as part of the cyberconnect's platform mainly used
# in hosting rails applications.  
# Licesnse: GPLv3: http://www.gnu.org/licenses/gpl.html



base=File.expand_path(File.dirname(__FILE__) + '/..')
require 'getoptlong'
require base + '/lib/constants'
require base + '/lib/containerize_me.rb'
require 'yaml'
require 'open3'
require 'fileutils'
require 'find'
require 'rubygems'
require 'platform_helpers'


module Init
  def usage
    msg=<<-EOF


      Usage:
      containerize_me --config <chroot yaml configuration file> --jail <full path to jail: /hosting/some_jail>

      where <chroot yaml configuration file> defines the charicteristics of
      the chroot environment being created.  Items, such as which files are copied
      over, and dependent yaml configuration files as well.  See the templates directory
      for examples.

    EOF
    raise ArgumentError, msg
  end

  def valid?(cfg)
    unless cfg.kind_of?(Hash)
      raise ArgumentError, "Configuration yaml is expected to contain a hash format but found #{cfg.class}"
    end
    required_keys = { :system_binaries => {:type => Array, :required => false}, 
                      :other_files => {:type => Array, :required => false},
                      :copy_items => {:type => Array, :required => true},
                      :mkdir => {:type => Array, :required => false},
                      :depends_on => {:type => Array, :required => false},
                      :users => {:type => Array, :required => false} }
    cfg.each_pair{ |k, v|
      if required_keys.has_key?(k)
        unless v.kind_of?(required_keys[k][:type])
          raise ArgumentError, "Configuration for key #{k} is type #{v.class} but expected #{required_keys[k][:type]}"
        end 
        required_keys.delete(k)
      end 
    }

    required_keys.each_pair { |k, v| 
      raise ArgumentError "Expected to find configuration key #{k}" if v[:required]
    }

  end

  def config
    opts = GetoptLong.new( [ '--config', '-c', GetoptLong::REQUIRED_ARGUMENT ],
                           ['--jail', '-j', GetoptLong::REQUIRED_ARGUMENT ] )
    cfg = {:cfg => nil, :jail => nil, :templates => nil}
    begin
      opts.each { |opt, arg|
        case opt
          when '--config'
            raise StandardError, "config file not found: #{arg}" unless File.exists?(arg)
            begin
              cfg[:cfg] = YAML::load_file(arg)
              cfg[:templates] = File.dirname(File.expand_path(arg))
            rescue => e
              raise StandardError, "\n\nUnable to parse yaml file.  Use irb and\nrequire 'yaml'\nYAML::load_file(#{'arg'})\n\nto test out your configuration.\n\n" 
            end
          when '--jail'
            cfg[:jail] = arg
        end
      }
    rescue => e
      usage
    end
    Init.usage unless cfg[:cfg] && cfg[:jail] &&cfg[:templates]
    Init.valid?(cfg[:cfg])
    cfg
  end

  def run
    cfg=config
    Jail.module_eval { @config = Jail::Config.new(:cfg => cfg[:cfg], :jail => cfg[:jail], :templates => cfg[:templates]) }
    Jail.perform
  end
  module_function :run, :config, :usage, :valid?
end

Init.run
